{"version":3,"sources":["components/main-content/participate-form.jsx","components/poll-form/form.jsx","components/poll-form/index.jsx","components/main-content/index.jsx","components/sidebar/poll-list.jsx","components/sidebar/index.jsx","data/polls.js","app.jsx","serviceWorker.js","index.js"],"names":["ParticipationForm","state","name","selectedOption","errors","handleChange","event","setState","target","value","handleSubmit","preventDefault","validation","isValid","props","getOpinion","pollId","poll","id","reset","length","Object","keys","Form","onSubmit","this","className","Button","color","onClick","toggleModal","type","deletePoll","options","map","opt","FormGroup","key","Label","CustomInput","onChange","invalid","style","padding","background","borderRadius","vote","totalVote","toFixed","Input","placeholder","FormFeedback","React","Component","MyForm","title","description","buttonValue","handleOptionChange","createOption","deleteOption","for","marginLeft","cursor","index","e","disabled","defaultOptions","shortid","generate","PollForm","isUpdate","handleOption","push","alert","decreamentTotalVote","splice","validate","submit","optionErrors","forEach","MainContent","openModal","viewOpinion","opinions","opinionFilter","option","filter","opinion","changeViewOpinion","updatePoll","Modal","isOpen","toggle","ModalHeader","ModalBody","ButtonGroup","active","ListGroup","ListGroupItem","PollList","polls","selectPoll","substr","Sidebar","searchTerm","handleSearch","created","Date","App","selectedPoll","addNewPoll","concat","updatedPoll","find","p","performSearch","toLowerCase","includes","response","o","POLLS","Container","Row","Col","md","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.530fed34.chunk.js","sourcesContent":["import React from 'react'\r\nimport {Form, FormGroup, CustomInput, Label, FormFeedback, Input, Button} from 'reactstrap'\r\n\r\nclass ParticipationForm extends React.Component {\r\n    state = {\r\n        name: '',\r\n        selectedOption: '',\r\n        errors: {}\r\n    }\r\n    handleChange = event => {\r\n        this.setState({[event.target.name]: event.target.value})\r\n    }\r\n    handleSubmit = event => {\r\n        event.preventDefault()\r\n        const {errors, isValid} = this.validation()\r\n        if(isValid) {\r\n            this.props.getOpinion({\r\n                pollId: this.props.poll.id,\r\n                name: this.state.name,\r\n                selectedOption: this.state.selectedOption\r\n            })\r\n            event.target.reset()\r\n            this.setState({name: '', selectedOption: '', errors: {}})\r\n        } else {\r\n            this.setState({errors})\r\n        }\r\n    }\r\n    validation = () => {\r\n        const errors = {}\r\n        const {name, selectedOption} = this.state\r\n        if(!name) {\r\n            errors.name = 'Please Provide A Name'\r\n        } else if(name.length > 20) {\r\n            errors.name = 'Name Too Long'\r\n        }\r\n\r\n        if(!selectedOption) {\r\n            errors.selectedOption = 'Please Select One Option'    \r\n        }\r\n        return {\r\n            errors,\r\n            isValid: Object.keys(errors).length === 0\r\n        }\r\n    }\r\n    render() {\r\n        return (\r\n            <Form onSubmit={this.handleSubmit}>\r\n                <div className=\"d-flex\">\r\n                    <h4>Option</h4>\r\n                    <Button\r\n                        color='warning'\r\n                        className='ml-auto'\r\n                        onClick={this.props.toggleModal}\r\n                    >\r\n                        Edit\r\n                    </Button>\r\n                    <Button \r\n                        color='danger'\r\n                        type='submit'\r\n                        className='ml-2'\r\n                        onClick={() => this.props.deletePoll(this.props.poll.id)}\r\n                    >\r\n                        Delete\r\n                    </Button>\r\n                </div>\r\n                {\r\n                    this.props.poll.options.map(opt => (\r\n                        <FormGroup className='my-2' key={opt.id}>\r\n                            <Label className='d-flex'>\r\n                                <CustomInput\r\n                                    type='radio'\r\n                                    id={opt.id}\r\n                                    name='selectedOption'\r\n                                    value={opt.id}\r\n                                    onChange={this.handleChange}\r\n                                    invalid={this.state.errors.selectedOption ? true : false}\r\n                                /> {opt.value}\r\n                                <span style={{\r\n                                    padding: '5px 20px',\r\n                                    background: 'green',\r\n                                    color: 'white',\r\n                                    borderRadius: '5px'\r\n                                }}\r\n                                className='ml-auto'\r\n                                >\r\n                                    {opt.vote}\r\n                                </span>\r\n                                <span style={{\r\n                                    padding: '5px 20px',\r\n                                    background: 'orange',\r\n                                    color: 'white',\r\n                                    borderRadius: '5px'\r\n                                }}\r\n                                className='ml-2'\r\n                                >\r\n                                    {\r\n                                        this.props.poll.totalVote > 0 \r\n                                        ?((100 * opt.vote)/this.props.poll.totalVote).toFixed(2) : 0\r\n                                    }\r\n                                    %\r\n                                </span>\r\n                            </Label>\r\n                        </FormGroup>\r\n                    ))\r\n                }\r\n                <FormGroup className='my-3'>\r\n                    <Label>Enter Name</Label>\r\n                    <Input\r\n                        value={this.state.name}\r\n                        placeholder='Shuva Dev'\r\n                        onChange={this.handleChange}\r\n                        name='name'\r\n                        invalid={this.state.errors.name ? true : false}\r\n                    />\r\n                    {this.state.errors.name && <FormFeedback>{this.state.errors.name}</FormFeedback>}\r\n                </FormGroup>\r\n                <Button type='submit' color='secondary'>\r\n                    Submit Your Opinion\r\n                </Button>\r\n            </Form>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ParticipationForm","import React from 'react'\r\nimport {Form, FormGroup, Label, Input, FormFeedback, Button} from 'reactstrap'\r\n\r\nconst MyForm = ({\r\n    title,\r\n    description,\r\n    options,\r\n    errors,\r\n    buttonValue, \r\n    handleChange,\r\n    handleOptionChange,\r\n    createOption,\r\n    deleteOption,\r\n    handleSubmit\r\n}) => (\r\n    <Form onSubmit={handleSubmit}>\r\n        <FormGroup>\r\n            <Label for='title'>Title</Label>\r\n            <Input\r\n                name='title'\r\n                id='title'\r\n                placeholder='A Dummy Title'\r\n                value={title}\r\n                onChange={handleChange}\r\n                invalid={errors.title ? true : false}\r\n            />\r\n            {errors.title && <FormFeedback>{errors.title}</FormFeedback>}\r\n        </FormGroup>\r\n        <FormGroup>\r\n            <Label for='description'>Description</Label>\r\n            <Input\r\n                name='description'\r\n                id='description'\r\n                placeholder='Describe your pool'\r\n                value={description}\r\n                onChange={handleChange}\r\n                invalid={errors.description ? true : false}\r\n            />\r\n            {errors.description && <FormFeedback>{errors.description}</FormFeedback>}\r\n        </FormGroup>\r\n        <FormGroup>\r\n            <Label>\r\n                Enter Option\r\n                <span style={{marginLeft: '30px', background: 'green', color: 'white', padding: '5px', borderRadius: '5px', cursor: 'pointer'}} onClick={createOption}>Add Option</span>\r\n            </Label>\r\n            {options.map((opt, index) => (\r\n                <div className='d-flex mb-2'>\r\n                    <Input\r\n                        value={opt.value}\r\n                        onChange={e => handleOptionChange(e, index)}\r\n                        invalid={errors.options && errors.options[index] ? true: false}\r\n                    />\r\n                    {errors.options && errors.options[index] && <FormFeedback>{errors.options[index]}</FormFeedback>}\r\n                    <Button \r\n                        color='danger'\r\n                        className='ml-2'\r\n                        disabled={options.length <= 2}\r\n                        onClick = {() => deleteOption(index)}\r\n                    >\r\n                        Delete\r\n                    </Button>\r\n                </div>\r\n            ))}\r\n        </FormGroup> \r\n        <Button color='primary' type='submit'>\r\n            {buttonValue}\r\n        </Button>\r\n    </Form>\r\n)\r\n\r\nexport default MyForm","import React from 'react'\r\nimport shortid from 'shortid'\r\n\r\nimport Form from './form'\r\n\r\nconst defaultOptions = [\r\n    {id: shortid.generate(), value: '', vote: 0},\r\n    {id: shortid.generate(), value: '', vote: 0}\r\n]\r\nclass PollForm extends React.Component {\r\n    state = {\r\n        title: this.props.isUpdate ? this.props.poll.title : '',\r\n        description: this.props.isUpdate ? this.props.poll.description : '',\r\n        options: this.props.isUpdate ? this.props.poll.options : defaultOptions,\r\n        errors: []\r\n    }\r\n    handleChange = event => {\r\n        this.setState({\r\n            [event.target.name]: event.target.value\r\n        })\r\n    }\r\n    handleOption = (event, index) => {\r\n        const options = [...this.state.options]\r\n        options[index].value = event.target.value\r\n        this.setState({options})\r\n    }\r\n    createOption = () => {\r\n        const {options} = this.state\r\n        \r\n        if(options.length < 5) {\r\n            options.push({\r\n                id: shortid.generate(),\r\n                value: '',\r\n                vote: 0\r\n            })\r\n            this.setState({ options })\r\n        } else {\r\n            alert('You can create max 5 options!')\r\n        }\r\n    }\r\n    deleteOption = index => {\r\n        const { options } = this.state\r\n\r\n        if(options.length > 2) {\r\n            if(this.props.isUpdate && options[index].value) {\r\n                this.props.decreamentTotalVote(this.props.poll.id, options[index].vote)\r\n                options.splice(index, 1)\r\n                this.setState({options})\r\n            } else {\r\n                options.splice(index, 1)\r\n                this.setState({options})\r\n            }\r\n        }else {\r\n            alert('You must have at least two options')\r\n        }\r\n    }\r\n    handleSubmit = event => {\r\n        event.preventDefault() \r\n        const {isValid, errors} = this.validate()\r\n        if(isValid) {\r\n            const {title, description, options} = this.state\r\n            const poll = {\r\n                title, \r\n                description,\r\n                options\r\n            }\r\n            if(this.props.isUpdate) {\r\n                poll.id = this.props.poll.id\r\n                this.props.submit(poll)\r\n                alert('Updated Successfully!')\r\n            } else {\r\n                this.props.submit({poll})\r\n                event.target.reset()\r\n                this.setState({title: '', description: '', options: defaultOptions, errors: {}})\r\n            }\r\n        } else {\r\n            this.setState({errors})\r\n        }\r\n    }\r\n    validate = () => {\r\n        const errors = {}\r\n        const {title, description, options} = this.state\r\n        if(!title) {\r\n            errors.title = 'Please Provide A Title'\r\n        } else if(title.length < 20) {\r\n            errors.title = 'Title Too Short'\r\n        } else if(title.length > 100) {\r\n            errors.title = 'Title Too Long'\r\n        }\r\n        if(!description) {\r\n            errors.description = 'Please Provide A Description'\r\n        } else if(description.length > 500) {\r\n            errors.title = 'Description Too Long'\r\n        } \r\n        const optionErrors = []\r\n        options.forEach((opt, index) => {\r\n            if(!opt.value) {\r\n                optionErrors[index] = 'Option Text Empty'\r\n                // optionErrors.push('Option Text Empty')\r\n            } else if(opt.value > 100) {\r\n                optionErrors[index] = 'Option Text Too Long'\r\n                // optionErrors.push('Option Text Too Long')\r\n            }\r\n        })\r\n        if(optionErrors.length > 0) {\r\n            errors.options = optionErrors\r\n        }\r\n        return {\r\n            errors,\r\n            isValid: Object.keys(errors).length === 0\r\n        }\r\n    }\r\n    render() {\r\n        const {title, description, options, errors} = this.state\r\n        \r\n        return (\r\n            <Form\r\n                title={title}\r\n                description={description}\r\n                options={options}\r\n                errors={errors}\r\n                buttonValue={this.props.buttonValue || 'Create Poll'}\r\n                handleChange={this.handleChange}\r\n                handleOptionChange={this.handleOption}\r\n                createOption={this.createOption}\r\n                deleteOption={this.deleteOption}\r\n                handleSubmit={this.handleSubmit}\r\n            />\r\n        )\r\n    }\r\n}\r\n\r\nexport default PollForm","import React from 'react'\r\nimport {Modal, ModalHeader, ModalBody, ButtonGroup, Button, ListGroup, ListGroupItem} from 'reactstrap'\r\n\r\nimport ParticipentForm from './participate-form'\r\nimport PollForm from '../poll-form/'\r\n\r\nclass MainContent extends React.Component {\r\n    state = {\r\n        openModal: false,\r\n        viewOpinion: 'all'\r\n    }\r\n\r\n    toggleModal = () => {\r\n        this.setState({openModal: !this.state.openModal})\r\n    }\r\n    \r\n    viewOpinion = () => {\r\n        if(this.state.viewOpinion === 'all') {\r\n            return this.props.poll.opinions\r\n        }\r\n\r\n        const {options} = this.props.poll\r\n        let opinionFilter = null\r\n        options.forEach(option => {\r\n            if(option.value === this.state.viewOpinion) {\r\n                const id = option.id\r\n                opinionFilter = this.props.poll.opinions.filter(opinion => opinion.selectedOption === id)\r\n                if(opinionFilter) {\r\n                    return\r\n                }        \r\n            }\r\n        })\r\n        return opinionFilter\r\n    }\r\n\r\n    changeViewOpinion = opinion => {\r\n        this.setState({viewOpinion: opinion})\r\n    }\r\n\r\n    render() {\r\n        if(Object.keys(this.props.poll).length === 0) {\r\n            return (\r\n                <div>\r\n                    <h3>Welcome to My Application.</h3>\r\n                    <p>You can create as many poll as you want. Click the new button to create a new pool. To check details of a poll please select from the left sidebar. By selecting a poll you can check it's details, participate and check other opinion about this polls.  </p>\r\n                </div>\r\n            )\r\n        }\r\n        const {poll, getOpinion, updatePoll, deletePoll, decreamentTotalVote} = this.props\r\n        return (\r\n            <div>\r\n                <h3>{poll.title}</h3>\r\n                <p>{poll.description}</p>\r\n                <br/>\r\n                <ParticipentForm\r\n                    poll={poll}\r\n                    getOpinion={getOpinion}\r\n                    deletePoll={deletePoll}\r\n                    toggleModal={this.toggleModal}\r\n                />\r\n                <Modal isOpen={this.state.openModal} toggle={this.toggleModal}>\r\n                    <ModalHeader toggle={this.toggleModal}>\r\n                        Update Modal\r\n                    </ModalHeader>\r\n                     <ModalBody>\r\n                        <PollForm\r\n                            poll={poll}\r\n                            isUpdate={true}\r\n                            submit={updatePoll}\r\n                            buttonValue='Update Poll'\r\n                            decreamentTotalVote={decreamentTotalVote}\r\n                        />\r\n                     </ModalBody>\r\n                </Modal>\r\n\r\n                <div className='mt-4'>\r\n                    <div className=\"d-flex\">\r\n                        <h3>Opinions</h3>\r\n                        <ButtonGroup className='ml-auto'>\r\n                            <Button color='primary' active={this.state.viewOpinion==='all'} onClick={() => this.changeViewOpinion('all')}>All</Button>\r\n                            {poll.options.map(option => (\r\n                                <Button color='primary' active={this.state.viewOpinion===option.value} onClick={() => this.changeViewOpinion(option.value)}>{option.value}</Button>\r\n                            ))}\r\n                        </ButtonGroup>\r\n                    </div>\r\n\r\n                    <ListGroup className='mt-3'>\r\n                        {this.viewOpinion().length ? this.viewOpinion().map(opinion => (\r\n                           <ListGroupItem key={opinion.id}>\r\n                               {opinion.name}\r\n                           </ListGroupItem>\r\n                        )) : <h5 className='mt-4 text-danger'>No Opinion Found</h5>}\r\n                    </ListGroup>\r\n                </div>\r\n                \r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default MainContent","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport {ListGroup, ListGroupItem } from \"reactstrap\";\r\n\r\nconst PollList = props => {\r\n    if(props.polls.length === 0) {\r\n        return <p>There are no polls.</p>\r\n    } \r\n    return (\r\n        <ListGroup>\r\n            {props.polls.map(poll => (\r\n                <ListGroupItem \r\n                    key={poll.id}\r\n                    style={{cursor: 'pointer'}}\r\n                    onClick={() => props.selectPoll(poll.id)}\r\n                >\r\n                    {poll.title.length > 30 ? poll.title.substr(0, 30) + '...' : poll.title}\r\n                </ListGroupItem>\r\n            ))}\r\n        </ListGroup>\r\n    )\r\n}\r\nPollList.propTypes = {\r\n    polls: PropTypes.array.isRequired,\r\n    selectPoll: PropTypes.func.isRequired\r\n}\r\n\r\nexport default PollList","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { Input, Button, Modal, ModalHeader, ModalBody } from \"reactstrap\"\r\n\r\nimport PollList from './poll-list'\r\nimport PollForm from '../poll-form'\r\n\r\nclass Sidebar extends React.Component {\r\n    state = {\r\n        openModal: false\r\n    }\r\n    toggleModal = () => {\r\n        this.setState({openModal: !this.state.openModal})\r\n    }\r\n    render() {\r\n        return (\r\n            <div style={{background: '#efefef', padding: '10px'}}>\r\n                <div className=\"d-flex mb-5\">\r\n                    <Input\r\n                        type='search'\r\n                        placeholder='Search'\r\n                        value={this.props.searchTerm}\r\n                        onChange={e => this.props.handleSearch(e.target.value)}\r\n                    />\r\n                    <Button color='success' onClick={this.toggleModal} className='ml-2'>\r\n                        New\r\n                    </Button>\r\n                </div>\r\n                <h3>List of polls</h3>\r\n                <hr/>\r\n                <PollList\r\n                    polls={this.props.polls}\r\n                    selectPoll={this.props.selectPoll}\r\n                />\r\n\r\n                <Modal toggle={this.toggleModal} isOpen={this.state.openModal}>\r\n                    <ModalHeader toggle={this.toggleModal}>\r\n                        Create A New Poll\r\n                    </ModalHeader>\r\n                    <ModalBody>\r\n                        <PollForm\r\n                            submit={this.props.submit}\r\n                            toggleModal={this.toggleModal}\r\n                        />\r\n                    </ModalBody>\r\n                </Modal>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nSidebar.propTypes = {\r\n    polls: PropTypes.array.isRequired,\r\n    selectPoll: PropTypes.func.isRequired,\r\n    searchTerm: PropTypes.string.isRequired,\r\n    handleSearch: PropTypes.func.isRequired,\r\n    submit: PropTypes.func.isRequired\r\n}\r\n\r\nexport default Sidebar","const  polls = [\r\n    {\r\n        id: '3948jd',\r\n        title: 'What is your favourite programming language?',\r\n        description: 'There are lot of programming language. Among them what is your favourite?',\r\n        options: [\r\n            {id: '1df3', value: 'Javascript', vote: 0},\r\n            {id: 'f6f6', value: 'PHP', vote: 0},\r\n            {id: '4ff3', value: 'C', vote: 0},\r\n            {id: '3df3', value: 'Pyton', vote: 0}\r\n        ],\r\n        created: new Date(),\r\n        totalVote: 0,\r\n        opinions: []\r\n    },\r\n    {\r\n        id: '464ajk',\r\n        title: 'Which fronted framework do you refer?',\r\n        description: 'Javascript has a vast variety of fronted libaries and framework. Each and every day we have a new one. Among them which frontend framework you like and prefer others?',\r\n        options: [\r\n            {id: '4jfc', value: 'Angular', vote: 0},\r\n            {id: 'jd4o', value: 'React', vote: 0},\r\n            {id: 'd023', value: 'Vue', vote: 0}\r\n        ],\r\n        created: new Date(),\r\n        totalVote: 0,\r\n        opinions: []\r\n    },\r\n    {\r\n        id: '0348kA',\r\n        title: 'Which is the best way to create android app?',\r\n        description: 'I want create an android application but I donot understand which technology will be better. There are lot of technologies available and my application is not so bulky. I need easy and simple solution. Please share your opinion.',\r\n        options: [\r\n            {id: '2jk3', value: 'Java', vote: 0},\r\n            {id: '58m6', value: 'Kotlin', vote: 0},\r\n            {id: '9053', value: 'React Native', vote: 0},\r\n            {id: 'k0s3', value: 'Flutter', vote: 0},\r\n            {id: '03o3', value: 'Ionic', vote: 0}\r\n        ],\r\n        created: new Date(),\r\n        totalVote: 0,\r\n        opinions: []\r\n    }\r\n]\r\n\r\nexport default polls","import React from 'react'\r\nimport shortid from 'shortid'\r\nimport {Container, Row, Col} from 'reactstrap'\r\n\r\nimport MainContent from './components/main-content'\r\nimport Sidebar from './components/sidebar'\r\n\r\nimport POLLS from './data/polls'\r\n\r\nclass App extends React.Component {\r\n    state = {\r\n        polls: [],\r\n        selectedPoll: {},\r\n        searchTerm: ''\r\n    }\r\n    componentDidMount() {\r\n        this.setState({polls: POLLS})\r\n    }\r\n    addNewPoll = poll => {\r\n        poll.id = shortid.generate()\r\n        poll.created = new Date()\r\n        poll.totalVote = 0\r\n        poll.opinions = []\r\n        \r\n        this.setState({polls: this.state.polls.concat(poll)})\r\n    }\r\n    updatePoll = updatedPoll => {\r\n        const polls = [...this.state.polls]\r\n        let poll = polls.find(p => p.id === updatedPoll.id)\r\n\r\n        poll.title = updatedPoll.title\r\n        poll.description = updatedPoll.description\r\n        poll.options = updatedPoll.options\r\n\r\n        this.setState({polls})\r\n    }\r\n    deletePoll = pollId => {\r\n        const polls = this.state.polls.filter(p => p.id !== pollId)\r\n        this.setState({polls, selectedPoll: {}})\r\n\r\n    }\r\n    selectPoll = pollId => {\r\n        const poll = this.state.polls.find(p => p.id === pollId)\r\n        this.setState({selectedPoll: poll})\r\n    }\r\n    handleSearch = value => {\r\n        this.setState({searchTerm: value})\r\n    }\r\n    performSearch = () => {\r\n        let filter =  this.state.polls.filter(poll => poll.title.toLowerCase().includes(this.state.searchTerm.toLowerCase()))\r\n\r\n        return filter\r\n    }\r\n    getOpinion =  response => {\r\n         const {polls} = this.state\r\n         const poll = polls.find(p => p.id === response.pollId)\r\n         const option = poll.options.find(o => o.id === response.selectedOption)\r\n\r\n         poll.totalVote++\r\n         option.vote++\r\n         const opinion = {\r\n             id: shortid.generate(),\r\n             name: response.name,\r\n             selectedOption: response.selectedOption\r\n         }\r\n         poll.opinions.push(opinion)\r\n         this.setState({polls})\r\n    }\r\n    decreamentTotalVote = (index, vote) => {\r\n        const polls = [...this.state.polls]\r\n        const poll = polls.find(p => p.id === index)\r\n        poll.totalVote -=vote\r\n\r\n        this.setState(polls)\r\n    }\r\n    render() {\r\n        return (\r\n            <Container className='my-5'>\r\n                <Row>\r\n                    <Col md={4}>\r\n                        \r\n                        <Sidebar\r\n                            polls={this.performSearch()}\r\n                            selectPoll={this.selectPoll}\r\n                            searchTerm={this.state.searchTerm}\r\n                            handleSearch={this.handleSearch}\r\n                            submit={this.addNewPoll}\r\n                        />\r\n                    </Col>\r\n                    <Col md={8}>\r\n                        <MainContent\r\n                            poll={this.state.selectedPoll}\r\n                            getOpinion={this.getOpinion}\r\n                            updatePoll={this.updatePoll}\r\n                            deletePoll={this.deletePoll}\r\n                            decreamentTotalVote={this.decreamentTotalVote}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n            </Container>\r\n        )\r\n    }\r\n}\r\n\r\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport App from './app';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}